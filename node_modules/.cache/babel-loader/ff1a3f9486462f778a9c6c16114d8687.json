{"ast":null,"code":"var _jsxFileName = \"D:\\\\memory-game\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport './App.css';\nimport SingleCard from './components/SingleCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cardImages = [{\n  \"src\": \"/img/helmet-1.png\",\n  matched: false\n}, {\n  \"src\": \"/img/potion-1.png\",\n  matched: false\n}, {\n  \"src\": \"/img/ring-1.png\",\n  matched: false\n}, {\n  \"src\": \"/img/scroll-1.png\",\n  matched: false\n}, {\n  \"src\": \"/img/shield-1.png\",\n  matched: false\n}, {\n  \"src\": \"/img/sword-1.png\",\n  matched: false\n}];\n\nfunction App() {\n  _s();\n\n  const [cards, setCards] = useState([]);\n  const [turns, setTurns] = useState(0);\n  const [choiceOne, setChoiceOne] = useState(null);\n  const [choiceTwo, setChoiceTwo] = useState(null); //shuffe cards\n\n  const shuffleCards = () => {\n    const shuffledCards = [...cardImages, ...cardImages].sort(() => Math.random() - 0.5).map(card => ({ ...card,\n      id: Math.random()\n    }));\n    setCards(shuffledCards);\n    setTurns(0);\n  };\n\n  const handleChoice = card => {\n    choiceOne ? setChoiceTwo(card) : setChoiceOne(card);\n  }; //compare two selected cards\n\n\n  useEffect(() => {\n    if (choiceOne && choiceTwo) {\n      if (choiceOne.src === choiceTwo.src) {\n        setCards(prevCards => {\n          return prevCards.map(card => {\n            if (card.src === choiceOne.src) {\n              return { ...card,\n                matched: true\n              };\n            } else {\n              return card;\n            }\n          });\n        });\n        resetTurn();\n      } else {\n        resetTurn();\n      }\n    }\n  }, [choiceOne, choiceTwo]);\n  console.log(cards); //reset choices & increase turn\n\n  const resetTurn = () => {\n    setChoiceOne(null);\n    setChoiceTwo(null);\n    setTurns(prevTurns => prevTurns + 1);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Magic Match\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: shuffleCards,\n      children: \"New Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-grid\",\n      children: cards.map(card => /*#__PURE__*/_jsxDEV(SingleCard, {\n        card: card,\n        handleChoice: handleChoice,\n        flipped: card === choiceOne || card === choiceTwo || card.matched\n      }, card.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 10\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"/JnteANCPxCZNpFpO1ZAWIjzFcc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","SingleCard","cardImages","matched","App","cards","setCards","turns","setTurns","choiceOne","setChoiceOne","choiceTwo","setChoiceTwo","shuffleCards","shuffledCards","sort","Math","random","map","card","id","handleChoice","src","prevCards","resetTurn","console","log","prevTurns"],"sources":["D:/memory-game/src/App.js"],"sourcesContent":["import { useEffect, useState } from 'react'\nimport './App.css'\nimport SingleCard from './components/SingleCard'\n\n\nconst cardImages = [\n  { \"src\":\"/img/helmet-1.png\" , matched: false},\n  { \"src\":\"/img/potion-1.png\" , matched: false},\n  { \"src\":\"/img/ring-1.png\" , matched: false},\n  { \"src\":\"/img/scroll-1.png\" , matched: false},\n  { \"src\":\"/img/shield-1.png\" , matched: false},\n  { \"src\":\"/img/sword-1.png\" , matched: false},\n]\nfunction App() {\n  const [cards, setCards] = useState([])\n  const [turns, setTurns] =useState(0)\n  const [choiceOne, setChoiceOne] = useState(null)\n  const [choiceTwo, setChoiceTwo] = useState(null)\n  //shuffe cards\n   const shuffleCards = ()=>{\n    const shuffledCards = [...cardImages, ...cardImages]\n    .sort(()=>Math.random() - 0.5)\n    .map((card)=> ({ ...card, id: Math.random()}))\n    setCards(shuffledCards)\n    setTurns(0)\n   }\n   \n   const handleChoice =  (card) => {\n    choiceOne ? setChoiceTwo(card) : setChoiceOne(card)\n   }\n   //compare two selected cards\n   useEffect(()=>{\n    if (choiceOne && choiceTwo){\n      if (choiceOne.src === choiceTwo.src){\n        setCards(prevCards => {\n          return prevCards.map( card =>{\n            if (card.src === choiceOne.src){\n              return { ...card, matched: true}\n            } else {\n              return card\n            }\n          })\n        })\n        resetTurn()\n      } else {\n        \n        resetTurn()\n      }\n    }\n\n   }, [choiceOne,choiceTwo])\n\n   console.log(cards)\n\n\n   //reset choices & increase turn\n\n   const resetTurn = () => {\n    setChoiceOne(null)\n    setChoiceTwo(null)\n    setTurns(prevTurns => prevTurns +1)\n   }\n  return (\n    <div className=\"App\">\n      <h1>Magic Match</h1>\n      <button onClick={shuffleCards}>New Game</button>\n      <div className='card-grid'>\n        {cards.map(card => (\n         <SingleCard key= {card.id} card={card}\n         handleChoice={handleChoice}\n         flipped={card === choiceOne || card ===choiceTwo || card.matched }\n         />\n        ))}\n\n\n      </div>\n      \n    </div>\n  );\n}\n\nexport default App"],"mappings":"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"},"metadata":{},"sourceType":"module"}